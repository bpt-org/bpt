#!/usr/bin/env bash

# Note: dcc-tools will be compilant with
# XDG Base Directory Specification in the future

# Current implementation will hardcode default paths

##
## Important paths
##
BIN_DIR="$HOME/.local/bin"
SRC_DIR="$HOME/.local/src"

TOOLS_DIR="${SRC_DIR}/dcc-tools"
BUCKETS_DIR="${TOOLS_DIR}/buckets"

# Set git command
git_cmd="git -C $TOOLS_DIR"

function myhelp_bucket() {

cat << EOF
Administra repositorios externos

  add <name> <git-url> Añade un repositorio externo
  remove <name>        Quita un repositorio externo
EOF

}

function myhelp_install() {

cat << EOF
Instala localmente un programa

  dcc-tools install <bucket>/<program>

Los programas se instalan dentro del directorio $TOOLS_DIR,
la ruta $HOME/.local/bin sólo contiene symlinks a ella.
EOF

}

function myhelp_remove() {

cat << EOF
Quita un programa instalado localmente

  dcc-tools remove <program>

No incluir el prefijo del bucket, se encontrará
automáticamente siguiendo la ruta del symlink.
EOF

}

function myhelp() {

    local tool="$1"

    if [[ -n $tool ]] ; then

        case "$tool" in
            bucket)
                myhelp_bucket
                exit
                ;;
            install)
                myhelp_install
                exit
                ;;
            remove)
                myhelp_remove
                exit
                ;;
            *)
                printf -- "No hay más información disponible.\n"
                exit
                ;;
        esac
    fi

cat << EOF
Administrador de paquetes locales para el servidor del dcc

  bucket      Administra repositorios externos **
  git         Ejecuta git dentro del repositorio principal
  help        Imprime esta ayuda
  install     Instala un programa **
  list        Lista los programas instalados
  os-release  Información sobre el servidor
  remove      Quita un programa **
  update      Actualiza todos los repositorios

Vea 'dcc-tools help <command>' para leer acerca de subcomandos especificos,
actualmente sólo disponibles para los marcados con '**'.
EOF

}


###
### TOOLS
###

## dcc-tools list
##
function tools_list() {

    local arraySymlink
    readarray -t arraySymlink < <(find "$BIN_DIR" -type l)

    for i in "${arraySymlink[@]}"; do

        local symlink_target=$(readlink "$i")
        local target_basedir=$(dirname "$symlink_target")

        if [[ "${target_basedir}" == "$TOOLS_DIR" ]] ; then
            printf -- "%s\n" "$(basename "$i")"
        fi

        target_basedir=$(dirname "$target_basedir")

        if [[ -f "${target_basedir}/.STUINFO" ]] ; then
            printf -- "%s\n" "$(basename "$i")"
        fi

        target_basedir=$(dirname "$target_basedir")

        if [[ "${target_basedir}" == "$BUCKETS_DIR" ]] ; then
            printf -- "%s\n" "$(basename "$i")"
        fi

    done

}

## dcc-tools update
##
function tools_update() {

    printf -- 'bucket: main\n'
    $git_cmd pull

    local arrayBucket
    readarray -t arrayBucket < <(dcc-tools bucket list)

    for bucket in "${arrayBucket[@]}" ; do
        printf -- 'bucket: %s\n' "$bucket"
        git -C "${BUCKETS_DIR}/${bucket}" pull
    done

}

## dcc-tools install <program>
##
function tools_install() {

    local tool="$1"
    local bucket=""

    if [[ -z $tool ]] ; then
        printf -- 'ERROR: no tool specified\n'
        exit
    fi

    IFS='/' read -r -a arrayTool <<< "$tool"

    is_bucket=${#arrayTool[@]}

    if [[ $is_bucket -eq 2 ]] ; then
        bucket="${arrayTool[0]}"
        tool="${arrayTool[1]}"
        buckets_tools_install "$bucket" "$tool"
        return

    elif [[ $is_bucket -gt 2 ]] ; then
        printf -- 'ERROR: bucket nesting is not supported\n'
        exit
    fi

    if [[ ! -f "${TOOLS_DIR}/${tool}" ]] ; then
        printf -- 'ERROR: %s: unknown tool\n' "$tool" 1>&2
        exit
    fi

    chmod +x "${TOOLS_DIR}/${tool}"
    ln -sf "${TOOLS_DIR}/${tool}" "${BIN_DIR}/${tool}"

}

## dcc-tools remove dcc-tools
##
function tools_remove_self() {

    # delete symlinks
    printf -- 'Deleting symlinks...'
    for i in $(dcc-tools list) ; do
        rm "${BIN_DIR}/$i"
    done
    printf -- 'done\n'

    # delete source folder
    printf 'Deleting dcc-tools...'
    rm -rf "$TOOLS_DIR"
    printf -- 'done\n'

    # say goodbye
    printf -- 'Farewell good fellow\n'

}

## dcc-tools remove <program>
##
function tools_remove() {

    local tool="$1"

    if [[ $tool == "dcc-tools" ]] ; then
        tools_remove_self
        exit

    elif [[ -f "${BIN_DIR}/${tool}" ]] ; then

        local symlink_target=$(readlink "${BIN_DIR}/${tool}")
        local target_basedir=$(dirname "$symlink_target")

        if [[ "${target_basedir}" == "$TOOLS_DIR" ]] ; then
            rm "${BIN_DIR}/${tool}"
            return
        fi

    else
        target_basedir=$(dirname "$target_basedir")
        local target_basename=$(basename "$target_basedir")

        if [[ "${target_basename}" == "${tool}" ]] ; then

            local arraySymlink
            readarray -t arrayBin < <(find "${target_basedir}/bin")

            for b in "${arrayBin[@]}" ; do
                b=$(basename $b)
                if [[ -f "${BIN_DIR}/$b" ]] ; then
                    rm "${BIN_DIR}/$b"
                fi
            done

            rm -rf "$target_basedir"
            return
        else
            printf -- 'ERROR: %s: tool not found\n' "$tool"
        fi
    fi


}

###
### BUCKETS
###

## dcc-tools install <bucket>/<program>
##
function buckets_tools_install() {

    local bucket="$1"
    local tool="$2"

    local arrayBucket
    readarray -t arrayBucket < <(find "$BUCKETS_DIR" -maxdepth 1 -mindepth 1 -type d -printf "%f\n")

    local bucket_exists=1
    for i in "${arrayBucket[@]}"; do

        if [[ "${i}" == "${bucket}" ]] ; then
            local bucket_exists=0
        fi

    done

    if [[ $bucket_exists -ne 0 ]] ; then
        printf -- 'ERROR: %s: bucket not found\n' "$bucket"
        exit
    fi

    local bucket_dir="${BUCKETS_DIR}/${bucket}"

    if [[ -f "${bucket_dir}/${tool}.stu" ]] ; then
        # Default format to install programs
        mkstu --file "${bucket_dir}/${tool}.stu" \
              --dest "${bucket_dir}/${tool}"

    elif [[ -f "${bucket_dir}/${tool}-fetch" ]] ; then
        # Legacy format to fetch single binary files
        local tool_fetch="${bucket_dir}/${tool}-fetch"
        chmod +x "$tool_fetch"
        mkdir -p "${bucket_dir}/${tool}/bin"
        $tool_fetch install "${bucket_dir}/${tool}/bin"
        ln -sf "${bucket_dir}/${tool}/bin/${tool}" "${BIN_DIR}/${tool}"
        chmod +x "${BIN_DIR}/${tool}"
    fi

}

## dcc-tools bucket list
##
function bucket_list() {

    if [[ ! -d "$BUCKETS_DIR" ]] ; then
        exit
    fi

    readarray -t arrayBucket < <(find "$BUCKETS_DIR" -maxdepth 1 -mindepth 1 -type d)

    for i in "${arrayBucket[@]}"; do
        printf -- '%s\n' "$(basename "$i")"
    done

}

## dcc-tools bucket add <bucket>
##
function bucket_add() {

    local name="$1"
    local _url="$2"

    if [[ -z $name ]] ; then
        printf -- "ERROR: no bucket name given\n" 1>&2
        exit

    elif [[ -z $_url ]] ; then
        printf -- 'ERROR: no repository url given\n' "$name"
        exit
    fi

    $git_cmd clone "$_url" "${BUCKETS_DIR}/${name}"

}

function bucket_remove() {

    local name=$1

    if [[ -z $name ]] ; then
        printf -- 'ERROR: no bucket name given\n'
        return

    elif [[ -d "${BUCKETS_DIR}/${name}" ]] ; then
        rm -rf "${BUCKETS_DIR}/${name}"

    else
        printf -- 'ERROR: %s: not found' "$name"
    fi

}

function bucket_case() {

    if [[ -z $1 ]] ; then
        printf -- 'ERROR: no command specified\n'
        exit
    fi

    case $1 in
        list)
            shift
            bucket_list
            exit
            ;;
        add)
            shift
            bucket_add "$1" "$2"
            exit
            ;;
        remove)
            shift
            bucket_remove "$1"
            exit
            ;;
        *)
            printf -- 'ERROR: bucket: unknown command\n'
            exit
            ;;
    esac

}

case $1 in
    help|-h|--help)
        shift
        myhelp "$1"
        exit
        ;;
    git)
        shift
        $git_cmd "$@"
        exit
        ;;
    os-release)
        shift
        cat /etc/os-release
        exit
        ;;
    install)
        shift
        tools_install "$1"
        exit
        ;;
    remove)
        shift
        tools_remove "$1"
        exit
        ;;
    list)
        shift
        tools_list
        exit
        ;;
    bucket)
        shift
        bucket_case "$@"
        exit
        ;;
    update)
        shift
        tools_update
        exit
        ;;
    *)
        myhelp
        exit
        ;;
esac
