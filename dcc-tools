#!/usr/bin/env bash

# Get location of repository by reading the symlink
# WARNING: It asumes symlink name as `dcc-tools`
dt_exec_symlink=$(command -v dcc-tools)
dt_exec_path=$(readlink "$dt_exec_symlink")
TOOLS_DIR=${dt_exec_path%%/dcc-tools}

BIN_DIR="$HOME/.local/bin"

# Set git command
git_cmd="git -C $TOOLS_DIR"

function myhelp() {

    printf -- "  bucket      Administra repositorios externos\n"
    printf -- "  fetch       Descarga actualizaciones\n"
    printf -- "  install     Instala una herramienta\n"
    printf -- "  list        Lista herramientas instaladas\n"
    printf -- "  os-release  InformaciÃ³n sobre el servidor\n"
    printf -- "  pull        Aplica las actualizaciones\n"
    printf -- "  remove      Elimina una herramienta\n"
    printf -- "  update      Actualiza todas las herramientas\n"

}

function list_tools() {

    for i in $(find "$HOME/.local/bin") ; do
        if [[ -L "$i" ]] ; then
            og_path=$(readlink "$i")
            if [[ ${og_path%/*} == "$TOOLS_DIR" ]] ; then
                printf -- "%s\n" "${og_path##*/}"
            fi
        fi
    done

}

function edit_tools() {

    local mode=$1
    local tool=$2

    if [[ -z $tool ]] ; then
        printf -- "ERROR: No tool selected\n" 1>&2
        exit

    elif [[ ! -f "$TOOLS_DIR/$tool" ]] && [[ ! -f "$TOOLS_DIR/${tool}-fetch" ]] ; then
        printf -- 'ERROR: %s: unknown tool\n' "$tool" 1>&2
        exit
    fi

    if [[ $mode == "install" ]] ; then

        if [[ -f "$TOOLS_DIR/${tool}-fetch" ]] ; then
            TOOL_EXEC="$TOOLS_DIR/${tool}-fetch"
            $TOOL_EXEC install "${TOOLS_DIR}"
            ln -s "${TOOLS_DIR}/${tool%%/*}/${tool##*/}" "$BIN_DIR/$tool"
        else
            ln -s "$TOOLS_DIR/$tool" "$BIN_DIR/$tool"
        fi

    elif [[ $mode == "remove" ]] ; then

        if [[ -f "$TOOLS_DIR/${tool}-fetch" ]] ; then
            TOOL_EXEC="$TOOLS_DIR/${tool}-fetch"
            $TOOL_EXEC remove "$TOOLS_DIR"
            ln -s "${TOOLS_DIR}/${tool%%/*}/${tool##*/}" "$BIN_DIR/$tool"
        else
            rm "${BIN_DIR}/${tool##*/}"
        fi
        
    fi

}

function install_bucket() {

    local name="$1"
    local _url="$2"

    if [[ -z $name ]] ; then
        printf -- "ERROR: no bucket name given\n" 1>&2
        exit

    elif [[ -z $_url ]] ; then
        printf -- 'ERROR: %s: no given repository' "$name"
        exit
    fi

    $git_cmd submodule add --force "$_url" "$name"

}

function remove_bucket() {

    local name="${1:-val}"

    if [[ -d "$TOOLS_DIR/$name" ]] ; then
        $git_cmd submodule deinit "$TOOLS_DIR/$name"
        $git_cmd rm "$TOOLS_DIR/$name"

    else
        printf -- 'ERROR: %s: not found' "$name"
    fi

}

function bucket_function() {

for arg in "$@"
do
    case $arg in
        add)
            shift
            install_bucket "$@"
            exit
            ;;
        remove)
            shift
            remove_bucket "$1"
            exit
            ;;
        *)
            ;;
    esac
done

}

for arg in "$@"
do
    case $arg in
        help|-h|--help)
            shift
            myhelp
            ;;
        fetch)
            shift
            $git_cmd fetch
            exit
            ;;
        pull)
            shift
            $git_cmd pull
            exit
            ;;
        git)
            shift
            $git_cmd "$@"
            exit
            ;;
        os-release)
            shift
            cat /etc/os-release
            exit
            ;;
        install)
            shift
            edit_tools "install" "$1"
            exit
            ;;
        remove)
            shift
            edit_tools "remove" "$1"
            exit
            ;;
        list)
            shift
            list_tools
            exit
            ;;
        bucket)
            shift
            bucket_function "$@"
            exit
            ;;
        update)
            shift
            $git_cmd pull
            $git_cmd submodule update --init --recursive
            exit
            ;;
        *)
            ;;
    esac
done
