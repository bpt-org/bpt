#!/usr/bin/env bash

source "${CS_ROOT}/${CS_NAME}/lib/shared"

function protocol_handler_http() {

    local filename="$1"
    local url="$2"

    printf -- '%s\n' "$url"
    curl -L "$url" --output "${srcdir}/${filename}"

    if [[ $? -ne 0 ]] ; then
        printf -- 'error: failed to download %s\n' "$filename"
        exit
    fi

    arraySourceFiles+=($filename)

}

function protocol_handler_git() {

    local dirname="$1"
    local url="$2"

    local target_dir="${srcdir}/${dirname}"

    if [[ -d "$target_dir" ]] ; then
        git -C "$target_dir" pull

    else
        git clone "$url" "${srcdir}/${dirname}"
    fi

    if [[ $? -ne 0 ]] ; then
        printf -- 'error: failed to clone repository\n'
        exit
    fi

}

function protocol_handler() {

    local input_name="$1"
    local input_url="$2"

    IFS='+' read -a arrayUrl <<< "$input_url"

    if [[ ${#arrayUrl[@]} -eq 1 ]] ; then

        local protocol=$(printf -- "${arrayUrl[0]}" | cut -d ':' -f1)
        case $protocol in
            https|http)
                protocol_handler_http "$input_name" "$input_url"
                ;;
            *)
                printf -- 'error: %s: protocol not supported\n' "$protocol"
                exit
                ;;
        esac

    elif [[ ${#arrayUrl[@]} -eq 2 ]] ; then

        local protocol="${arrayUrl[0]}"
        case $protocol in
            git)
                protocol_handler_git "$input_name" "${arrayUrl[1]}"
                ;;
            *)
                printf -- 'error: %s: protocol not supported\n' "$protocol"
                exit
                ;;
        esac

    elif [[ ${#arrayUrl[@]} -gt 2 ]] ; then
        printf -- 'error: source url accepts at most two + separated parameters\n'
        exit
    fi

}

function run_download() {

    printf -- '==> Downloading sources...\n'

    for f in "${source[@]}" ; do
        f=$(printf -- "$f" | sed 's/::/ /')

        read -a arrayF <<< $f
        if [[ ${#arrayF[@]} -ne 2 ]] ; then
            printf -- 'error: source element accepts exactly two parameters\n'
        fi

        local input_name=$(printf -- "$f" | cut -d ' ' -f1 )
        local input_url=$(printf -- "$f" | cut -d ' ' -f2 )

        protocol_handler "$input_name" "$input_url"
    done

}

function run_extract() {

    printf -- '==> Extracting sources...\n'

    has_bsdtar="$(command -v bsdtar)"
    if [[ -z "$has_bsdtar" ]] ; then
        printf -- 'warning: bsdtar is not installed\n'
        printf -- 'warning: using tar as fallback\n'
        printf -- 'warning: some archives may not be supported\n'
        sleep 2
    fi

    for f in "${arraySourceFiles[@]}" ; do
        if [[ ! -f "${srcdir}/$f" ]] ; then
            printf -- 'error: %s: file not found\n' "$f"
            exit
        fi
        printf -- "$f\n"
        if [[ -n $has_bsdtar ]] ; then
            bsdtar -xf "${srcdir}/$f" -C "${srcdir}"
        else
            tar -xf "${srcdir}/$f" -C "${srcdir}"
        fi
    done

}

function run_build() {

    printf -- '==> Building program...\n'
    build

}

function add_pkginfo() {

    local pkginfo="${pkgdir}/${pkgname}/.PKGINFO"
    printf -- 'pkgver=%s\n' "$pkgver" >> "$pkginfo"
    printf -- 'pkgrel=%s\n' "$pkgrel" >> "$pkginfo"

}

function run_package() {

    printf -- '==> Packaging program...\n'
    package

    add_pkginfo

    mkdir -p "${CS_PACKAGES_DIR}/${bucket}"
    tar -cf "${CS_PACKAGES_DIR}/${bucket}/${pkgname}-${pkgver}-${pkgrel}.tar.xz" -C "${pkgdir}" .

    printf '%s-%s-%s.tar.xz' "$pkgname" "$pkgver" "$pkgrel"  > "${CS_PACKAGES_DIR}/${bucket}/${pkgname}"

}

function run_cleanup() {

    local req="$1"

    rm -rf "$pkgdir"

    if [[ $req -eq 0 ]] ; then
        return

    elif [[ $req -eq 1 ]] ; then
        rm -rf "$srcdir"
    fi

}
