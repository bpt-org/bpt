#!/usr/bin/env bash

#######################################
# Check the url protocol
# Arguments:
#   URL string
# Outputs:
#   Nothing if the protocol is valid
#   Error if protocol is not valid
#######################################
function valid_url() {

    local url="$1"
    local protocol=$(printf -- "$url" | cut -d ':' -f1)

    case $protocol in
        https|http)
            ;;
        *)
            printf -- 'error: %s: protocol not supported\n' "$protocol"
            exit
            ;;
    esac

}

#######################################
# Add a bucket to bpt
# Globals:
#   CS_BUCKETS_DIR
#   CS_KNOWN_BUCKETS
# Arguments:
#   Name of the bucket
#   Url of the bucket repository
# Outputs:
#   Info of bucket when in known lists
#   Warning when using a reserved bucket name
#   Error when input is incorrect
# Returns:
#  0 when bucket added succesfuly
#  1 when input is incorrect
#######################################
function bucket_add() {

    local name="$1"
    local url="$2"

    if [[ -z $name ]] ; then
        printf -- 'error: bucket name not provided\n'
        exit
    fi

    if [[ -d "${CS_BUCKETS_DIR}/${name}/.git" ]] ; then
        local git_output=$(git -C "${CS_BUCKETS_DIR}/${name}" pull)
        printf ' -> %s\n' "$git_output"
        exit
    fi

    local is_official=$(grep "$name" $CS_KNOWN_BUCKETS)

    if [[ -z $url && -z $is_official ]] ; then
        printf -- 'error: two parameters required\n'
        exit 1

    elif [[ -n $url && -z $is_official ]] ; then
        valid_url "$url"

    elif [[ -z $url && -n $is_official ]] ; then
        url="$(printf -- "$is_official" | cut -d ' ' -f2)"
        printf -- 'info: known bucket\n'
        printf -- 'info: %s\n' "$url"

        local branch="$(printf -- "$is_official" | cut -d ' ' -f3)"

        if [[ -n "$branch" ]] ; then
            git clone -b "$branch" "$url" "${CS_BUCKETS_DIR}/${name}"
            return
        fi

    elif [[ -n $url && -n $is_official ]] ; then
        printf -- 'warning: overriding a known bucket\n'
        valid_url "$url"
    fi

    git clone "$url" "${CS_BUCKETS_DIR}/${name}"

}

#######################################
# List buckets added on bpt
# Globals:
#   CS_BUCKETS_DIR
# Outputs:
#   Info when no buckets added
#   Buckets installed separated by \n
# Returns:
#   0 on success
#   1 if there are no buckets installed
#######################################
function bucket_list() {

    local arrayBuckets=()
    readarray -t arrayBuckets < <(find "${CS_BUCKETS_DIR}" -maxdepth 1 -mindepth 1 -type d -printf "%f\n")

    if [[ "${#arrayBuckets[@]}" -eq 0 ]] ; then
        printf -- 'There are no buckets installed\n'
        return 1
    fi

    for b in "${arrayBuckets[@]}" ; do
        printf -- '%s\n' "$b"
    done

}

#######################################
# Remove a bucket of bpt
# Globals:
#   CS_BUCKETS_DIR
# Arguments:
#   Bucket for removal
# Outputs:
#   Info of succesful removal
#   Error on empty input
#   Error when bpt has no buckets
#######################################
function bucket_remove() {

    local target="$1"

    if [[ -z "$target" ]] ; then
        printf -- 'error: bucket name not specified\n'
        exit
    fi

    local arrayBuckets=()
    _bucket_list=$($CS_NAME bucket list)

    if [[ $? -ne 0 ]] ; then
        printf -- 'There are no buckets installed\n'
        return 1
    fi

    readarray -t arrayBuckets < <(printf -- "$_bucket_list")

    for b in "${arrayBuckets[@]}" ; do
        if [[ "$target" == "$b" ]] ; then
            rm -rf "${CS_BUCKETS_DIR}/${target}"
            printf -- 'Bucket %s removed succesfully\n' "$target"
            return
        fi
    done

}

#######################################
# Updates all bucket repositories
# Globals
#   CS_BUCKETS_DIR
#   CS_NAME
# Outputs
#   Info of git update status
# Returns
#   0 if updates succesfuly
#   1 if there are no buckets added
#######################################
function bucket_update() {

    local arrayBuckets=()
    _bucket_list=$($CS_NAME bucket list)

    if [[ $? -ne 0 ]] ; then
        printf -- 'There are no buckets installed\n'
        return 1
    fi

    readarray -t arrayBuckets < <(printf -- "$_bucket_list")

    for b in "${arrayBuckets[@]}" ; do
        printf -- 'Updating %s\n' "$b"
        git -C "${CS_BUCKETS_DIR}/$b" pull
    done

}
