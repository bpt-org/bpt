#!/usr/bin/env bash

source "${CS_ROOT}/${CS_NAME}/lib/core"

#######################################
# Check the url protocol
# Arguments:
#   URL string
# Outputs:
#   Nothing if the protocol is valid
#   Error if protocol is not valid
# Returns:
#   0 if protocol is http
#   1 if protocol is not http
#######################################
function _check_url_protocol() {

    local url="$1"
    local protocol=$(printf -- "$url" | cut -d ':' -f1)

    case $_protocol in
        https|http)
            return 0
            ;;
        *)
            err "$_protocol protocol not supported"
            exit 4
            ;;
    esac

}

#######################################
# Add a bucket to bpt
# Globals:
#   CS_BUCKETS_DIR
#   CS_KNOWN_BUCKETS
# Arguments:
#   Name of the bucket
#   Url of the bucket repository
# Outputs:
#   Info of bucket when in known lists
#   Warning when using a reserved bucket name
#   Error when input is incorrect
# Returns:
#  0 bucket added  succesfuly
#  1 bucket name not provided
#  2 bucket not known and url not provided
#  3 bucket already exists
#  4 url protocol not supported
#  5 grep failure
#  6 git failure
#######################################
function bucket_add() {

    local name="$1"
    local url="$2"

    local _bucket_match
    local _known_bucket
    local _branch

    local _git_exit_code

    _bucket_match="$(grep -m 1 "$name" "$CS_KNOWN_BUCKETS")"
    _known_bucket=$?
    _branch=""

    if [[ -z "$name" ]] ; then
        err "bucket name not provided"
        exit 1
    fi

    # Try to provide a valid URL
    # or give non-zero exit status

    if [[ -z "$url" ]] ; then
        inf "searching on known buckets list"

        if [[ $_known_bucket -eq 1 ]] ; then
            err "bucket not found"
            exit 2

        elif [[ $_known_bucket -eq 2 ]] ; then
            err "grep failure"
            exit 5

        else
            url="$(printf -- "$_bucket_match" | cut -d ' ' -f2)"
            _branch="$(printf -- "$_bucket_match" | cut -d ' ' -f3)"
            _check_url_protocol "$url"
        fi

    # If the url is valid
    # check if it matches
    # a known bucket

    else
        if [[ $_known_bucket -eq 0 ]] ; then
            war "overriding a known bucket"

        elif [[ $_known_bucket -eq 2 ]] ; then
            war "grep failure"
            war "ignoring buckets.list"
        fi

        _check_url_protocol "$url"
    fi

    # Avoid unhandled git errors
    # by catching all outcomes

    if [[ -d "${CS_BUCKETS_DIR}/${name}/.git" ]] ; then
        err "bucket of the same name already exists"
        exit 3

    elif [[ -n "$_branch" ]] ; then
        git clone -b "$_branch" "$url" "${CS_BUCKETS_DIR}/${name}"
        _git_exit_code=$?

    elif [[ -z "$_branch" ]] ; then
        git clone "$url" "${CS_BUCKETS_DIR}/${name}"
        _git_exit_code=$?
    fi

    if [[ $_git_exit_code -ne 0 ]] ; then
        return 6
    fi

    return 0

}

#######################################
# List buckets added on bpt
# Globals:
#   CS_BUCKETS_DIR
# Outputs:
#   Info when no buckets added
#   Buckets installed separated by \n
#######################################
function bucket_list() {

    local arrayBuckets=()
    readarray -t arrayBuckets < <(find "${CS_BUCKETS_DIR}" -maxdepth 1 -mindepth 1 -type d -printf "%f\n")

    if [[ "${#arrayBuckets[@]}" -eq 0 ]] ; then
        printf -- 'There are no buckets installed\n'
        exit
    fi

    for b in "${arrayBuckets[@]}" ; do
        printf -- '%s\n' "$b"
    done

}

#######################################
# Remove a bucket of bpt
# Globals:
#   CS_BUCKETS_DIR
# Arguments:
#   Bucket for removal
# Outputs:
#   Info of succesful removal
#   Error on empty input
#   Error when bpt has no buckets
#######################################
function bucket_remove() {

    local target="$1"

    if [[ -z "$target" ]] ; then
        printf -- 'error: bucket name not specified\n'
        exit
    fi

    local arrayBuckets=()
    readarray -t arrayBuckets < <($CS_NAME bucket list)

    if [[ "${#arrayBuckets[@]}" -eq 0 ]] ; then
        printf -- 'error: there are no buckets added\n'
        exit
    fi

    for b in "${arrayBuckets[@]}" ; do
        if [[ "$target" == "$b" ]] ; then
            rm -rf "${CS_BUCKETS_DIR}/${target}"
            printf -- 'Bucket %s removed succesfully\n' "$target"
            return
        fi
    done

}
