#!/usr/bin/env bash

source "${CS_ROOT}/${CS_NAME}/lib/shared"
source "${CS_ROOT}/${CS_NAME}/lib/semver"

function deploy_symlinks() {

    local prog_name="$1"

    local arrayBinary=()
    readarray -t arrayBinary < <(find "${CS_ROOT}/${prog_name}/bin" -type f)

    printf -- '==> Making symlinks\n'

    for b in ${arrayBinary[@]} ; do
        b_name=$(basename $b)
        ln -sf "$b" "${CS_BIN_DIR}/${b_name}"
        printf -- '%s -> %s\n' "$b" "${CS_BIN_DIR}/${b_name}"
    done

}

function check_pkg_dir_not_empty() {

    local bucket="$1"

    if [[ ! -d "${CS_PACKAGES_DIR}/${bucket}" ]] ; then
        return 1
    fi

    readarray -t arrayPkgFiles < <(find "${CS_PACKAGES_DIR}/${bucket}" -name "*.tar.xz" -type f -printf '%f\n')

    if [[ "${#arrayPkgFiles[@]}" -eq 0 ]] ; then
        return 2
    fi

}

function get_pkg_matches() {

    local target_package="$1"

    for pkg in "${arrayPkgFiles[@]}" ; do

         local pkg_info=( $(get_name_version_release "$pkg") )

         local pkg_name=${pkg_info[0]}
         local pkg_ver=${pkg_info[1]}
         local pkg_rel=${pkg_info[2]}

        if [[ "$pkg_name" == "$target_package" ]] ; then
            arrayTargetPkg+=("${pkg_name}-${pkg_ver}-${pkg_rel}")
        fi

    done

    if [[ ${#arrayTargetPkg[@]} -eq 0 ]] ; then
        return 1
    fi

}

function match_single() {

    local pkg_bucket="$1"
    local pkg_info=( $(get_name_version_release "${arrayTargetPkg[0]}") )
    local pkg_ver=${pkg_info[1]}

    unpack_tarball "${arrayTargetPkg[0]}" "$pkg_bucket"

}

function match_multiple() {

    local pkg_bucket="$1"

    printf -- '==> Multiple packages found\n'

    declare -i count
    count=0

    for pkg in "${arrayTargetPkg[@]}" ; do
        printf -- "[$count] %s\n" "$pkg"
        count+=1
    done

    unset number
    until [[ $number == +([0-9]) ]] ; do
        read -r -p 'Choose an index number: ' number
    done

    if [[ $number -gt $(($count-1)) ]] ; then
        printf -- 'error: index out of rage\n'
        exit

    else
        unpack_tarball "${arrayTargetPkg[$number]}" "$pkg_bucket"
    fi

}

function unpack_tarball() {

    local pkg_name_ver_rel="$1"
    local pkg_bucket="$2"
    local pkg_info=( $(get_name_version_release "$pkg_name_ver_rel") )

    local pkg_name=${pkg_info[0]}
    local pkg_ver=${pkg_info[1]}
    local pkg_rel=${pkg_info[2]}

    local pkg_verrel="${pkg_ver}-${pkg_rel}"

    if [[ -d "${CS_ROOT}/${pkg_name}" ]] ; then
        source "${CS_ROOT}/${pkg_name}/.PKGINFO"
        local pkgverrel="${pkgver}-${pkgrel}"

        printf -- 'Version %s installed. ' "$pkgverrel"

        local _sv_cmp
        _sv_cmp=$(semver_compare "$pkgverrel" "$pkg_verrel")

        if [[ _sv_cmp -eq 0 ]] ; then
            printf -- 'Reinstall [y/n] '
            answer_yes_or_exit
            printf -- '==> Reinstalling %s\n' "$pkgname"

        elif [[ _sv_cmp -eq -1 ]] ; then
            printf -- 'Upgrade to %s [y|n] ' "$pkg_verrel"
            answer_yes_or_exit
            printf -- '==> Upgrading %s\n' "$pkgname"

        elif [[ _sv_cmp -eq 1 ]] ; then
            printf -- 'Downgrade to %s [y|n] ' "$pkg_verrel"
            answer_yes_or_exit
            printf -- '==> Downgrading %s\n' "$pkgname"

        fi

    else
        printf -- '==> Installing %s\n' "$pkg_name"
    fi

    printf -- '%s -> %s\n' "${pkg_name}-${pkg_ver}-${pkg_rel}.tar.xz"  "${CS_ROOT}/${pkg_name}"
    rm -rf "${CS_ROOT}/${pkg_name}"
    tar -xf "${CS_PACKAGES_DIR}/${pkg_bucket}/${pkg_name}-${pkg_ver}-${pkg_rel}.tar.xz" -C "${CS_ROOT}"

    deploy_symlinks ${pkg_name}

}
