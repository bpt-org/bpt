#!/usr/bin/env bash

function deploy_symlinks() {

    local prog_name="$1"

    local arrayBinary=()
    readarray -t arrayBinary < <(find "${CS_ROOT}/${prog_name}/bin" -type f)

    printf -- '==> Making symlinks\n'

    for b in ${arrayBinary[@]} ; do
        b_name=$(basename $b)
        ln -sf "$b" "${CS_BIN_DIR}/${b_name}"
        printf -- '%s -> %s\n' "$b" "${CS_BIN_DIR}/${b_name}"
    done

}

function get_name_version_release() {

    local f_name_ver_rel_ext="$1"

    local f_name_ver_rel=${f_name_ver_rel_ext/$PKGEXT/}
    local f_name_ver=${f_name_ver_rel%-*}
    local f_name${f_name_ver%-*}

    local f_rel=${f_name_ver_rel/${f_name_ver}-/}
    local f_ver=${f_name_ver/${f_name}-/}

    printf -- '%s %s %s' "$f_name" "$f_ver" "$f_rel"

}

function unpack_tarball() {

    local pkg_name_ver="$1"
    local pkg_ver="${pkg_name_ver##*-}"
    local pkg_name="${pkg_name_ver%-*}"

    if [[ -d "${CS_ROOT}/${pkg_name}" ]] ; then
        source "${CS_ROOT}/${pkg_name}/.PKGINFO"

        if [[ "$pkg_ver" != "$pkgver" ]] ; then

            printf -- 'Version %s installed. Replace with version %s? [y|n] ' "$pkgver" "$pkg_ver"
            read -r ans

            if [[ "$ans" != "y" ]] ; then
                return
            fi

            printf -- '==> Updating %s\n' "$pkg_name"

        else

            printf -- 'Package already installed. Reinstall? [y|n] '
            read -r ans

            if [[ "$ans" != "y" ]] ; then
                return
            fi

            printf -- '==> Reinstalling %s\n' "$pkg_name"
        fi

    else
        printf -- '==> Installing %s\n' "$pkg_name"
    fi

    printf -- '%s -> %s\n' "${pkg_name_ver}.tar.xz"  "${CS_ROOT}/${pkg_name}"
    rm -rf "${CS_ROOT}/${pkg_name}"
    tar -xf "${CS_PACKAGES_DIR}/${pkg_name_ver}.tar.xz" -C "${CS_ROOT}"

    deploy_symlinks ${pkg_name}

}
