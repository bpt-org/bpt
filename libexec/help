#/usr/bin/env bash
#::usage
#bpt help [<command>]
#::summary
#Prints this help message
#::help
#If a valid command is supplied it will display its extended help.
#::helpend
function print_all_help() {

   cat << EOF
bpt - Basic/Bash Package Tool

  Available Commands:
EOF

    local arrayLibexec=()
    readarray -t arrayLibexec < <(find "${CS_ROOT}/${CS_NAME}/libexec" -type f)

    for l in "${arrayLibexec[@]}" ; do

        local l_name=$(basename $l)

        if [[ "$l_name" == "help" ]] ; then
            local l_summary="#Prints this help message"
        else
            local l_summary=$( awk '/::summary/{flag=1; next} /::help/{flag=0} flag' $l )
        fi
        
        printf -- '    %s%s' "$l_name" "$l_summary" | awk -F '#' '{ printf "%-20s %-40s\n", $1, $2}'
    done

}

function print_command_help() {

    local cmd_name="$1"

    local arrayLibexec=()
    readarray -t arrayLibexec < <(find "${CS_ROOT}/${CS_NAME}/libexec" -type f)

    for l in "${arrayLibexec[@]}" ; do
    
    local l_name=$(basename $l)

    if [[ "$cmd_name" == "help" ]] ; then
        print_all_help
        exit
    fi

    if [[ "$l_name" == "$cmd_name" ]] ; then
        awk '/^#::usage/{flag=1; next} /^#::summary/{flag=0} flag' $l | tr '#' ' '
        printf -- '\n'
        awk '/^#::help/{flag=1; next} /^#::pleh/{flag=0} flag' $l | tr '#' ' '
        return
    fi

    done

    printf -- 'Command not available.\n'

}

if [[ -z "$1" ]] ; then
    print_all_help

else
    print_command_help "$1"
fi
