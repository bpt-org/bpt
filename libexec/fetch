#!/usr/bin/env bash
#::usage
#bpt fetch <bucket>/<program>
#::summary
#Download a package from a source
#::help
#It reads the sources.list for a bucket match and tries to fetch
#a package ready for installation. The package must be built for the
#host system or it may fail for missing library dependencies.
#::pleh
source "${CS_ROOT}/${CS_NAME}/lib/shared"

function fetch_program() {

    local program="$1"

    local input_info=( $(get_bucket_and_program "$program") )

    if [[ $? -eq 3 ]] ; then
        printf -- 'error: nested buckets not allowed\n'
    fi

    local bucket=${input_info[0]}
    local program=${input_info[1]}

    local has_source=$(grep -m 1 $bucket $CS_KNOWN_SOURCES)

    if [[ -z "$has_source" ]] ; then
        printf -- 'No sources available for %s bucket\n' "$bucket"
        exit
    fi

    local source_url="$(printf -- "$has_source" | cut -d ' ' -f2)"

    if [[ ! -d "${CS_BUCKETS_DIR}/${bucket}" ]] ; then
        printf -- 'warning: bucket %s not available\n' "$bucket"
        printf -- 'warning: searching on bucket list\n'
        bpt bucket add "$bucket"

        if [[ $? -ne 0 ]] ; then
            printf -- 'error: unkown bucket\n'
            exit 1
        fi

    fi

    source "${CS_BUCKETS_DIR}/${bucket}/${program}/PKGBUILD"

    local target_dirname="${CS_PACKAGES_DIR}/${bucket}"

    printf -- '%s\n' "$remote_dirname"

    mkdir -p "$target_dirname"

    # The exit status of the command is overridden by the
    # exit status of the creation of the local variable;
    # therefore if must happen in two steps
    local package_on_remote
    package_on_remote=$( curl -L --fail "${source_url}/${bucket}/${pkgname}" )

    if [[ $? -ne 0 ]] ; then
        printf -- 'Package not available on source\n'
        exit
    fi

    curl -L --fail "${source_url}/${bucket}/${package_on_remote}" \
        --output "${target_dirname}/${package_on_remote}"

    if [[ -$? -ne 0 ]] ; then
        printf -- 'info: 404 means package does not exist\n'
        printf -- 'info: 403 means lack of permissions to download\n'
        printf -- 'Failed to fetch package version %s-%s from server\n' "$pkgver" "$pkgrel"
        exit
    fi

    bpt install "${bucket}/${program}"

}

fetch_program "$1"
