#!/usr/bin/env bash

mkstu_download() {

    has_curl="$(command -v curl)"
    if [[ -z "$has_curl" ]] ; then
        printf -- 'ERROR: curl is not installed on the system\n'
        exit
    fi

    printf -- '===> Downloading sources\n'

    mkdir -p "${INSTALL_DIR}/src"
    cd "${INSTALL_DIR}/src"

    for f in "${source[@]}" ; do

        f=$(printf -- "$f" | sed 's/::/ /')

        read -a  arrayF <<< $f
        if [[ ${#arrayF[@]} -ne 2 ]] ; then
            printf -- 'ERROR: source element accepts exactly two parameters\n'
        fi

        local filename=$(printf -- "$f" | cut -d ' ' -f1 )
        local url=$(printf -- "$f" | cut -d ' ' -f2 )

        curl --output /dev/null --silent --head --fail "$url"

        if [[ $? -ne 0 ]] ; then
            printf -- 'ERROR: url not valid\n'
            exit
        fi

        printf -- "source: ${url}\n"
        curl -L "$url" --output "${INSTALL_DIR}/src/${filename}"

        if [[ $? -ne 0 ]] ; then
            printf -- 'ERROR: failed to download %s\n' "$filename"
            exit
        fi

        arraySourceFiles+=($filename)
    done

}

mkstu_extract() {

    has_bsdtar="$(command -v bsdtar)"
    if [[ -z "$has_bsdtar" ]] ; then
        printf -- 'ERROR: bsdtar is not installed on the system\n'
        exit
    fi

    printf -- '===> Extracting sources\n'

    cd "${INSTALL_DIR}/src"

    for f in "${arraySourceFiles[@]}" ; do
        if [[ ! -f "${INSTALL_DIR}/src/$f" ]] ; then
            printf -- "ERROR: not found $f to decompress\n"
            exit
        fi
        printf -- "$f\n"
        bsdtar -xf "$f"
    done
}

mkstu_symlink() {

    printf -- '===> Making symlinks\n' 

    for b in ${bin[@]} ; do
        if [[ -f "${INSTALL_DIR}/bin/$b" ]] ; then
            printf -- "${BIN_DIR}/${b}\n"
            ln -sf "${INSTALL_DIR}/bin/$b" "${BIN_DIR}/$b"
            chmod +x "${BIN_DIR}/$b"
        else
            printf -- 'ERROR: %s: binary not found\n' "$b"
        fi
    done

}

mkstu_info() {

    cd "${INSTALL_DIR}"

    touch .STUINFO
    printf -- 'name=%s\n' "$stuname" >> .STUINFO
    printf -- 'ver=%s\n' "$stuver"   >> .STUINFO

}

mkstu_run_build() {

    cd "${INSTALL_DIR}/src"

    printf -- '===> Building program\n'

    build

}

mkstu_run_install() {

    cd "${INSTALL_DIR}/src"

    printf -- '===> Installing program\n'

    dinstall

}

mkstu_init() {

    BIN_DIR="${HOME}/.local/bin"

    arraySourceFiles=()

    mkdir -p "$INSTALL_DIR"
    cd $INSTALL_DIR

    source "$STU_FILE"

    if [[ -n "${source[@]}" ]] ; then
        mkstu_download
        mkstu_extract
    fi

    mkstu_run_build

    mkstu_run_install

    mkstu_symlink

    mkstu_info

}

for arg in "$@" ; do
    case $arg in
        --dest)
            shift
            INSTALL_DIR="$1"
            shift
            ;;
        --file)
            shift
            STU_FILE="$1"
            shift
            ;;
    esac
done

mkstu_init "$@"
